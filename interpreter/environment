; Copyright (C) 2022 Free Software Foundation, Inc.
;
; This program is free software: you can redistribute it and/or modify
; it under the terms of the GNU General Public License as published by
; the Free Software Foundation, either version 3 of the License, or
; any later version.
;
; This program is distributed in the hope that it will be useful, but
; WITHOUT ANY WARRANTY; without even the implied warranty
; of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
; General Public License for more details.
;
; You should have received a copy of the GNU General Public License
; along with this program. If not, see <https://www.gnu.org/licenses/>. 

(include "primitives")

(define the-empty-environment '())

(define add-binding-to-frame!
  (lambda (variable value frame)
    ; append
    (set-car! frame (pair variable (car frame)))
    (set-cdr! frame (pair value (cdr frame)))))

(define first-frame
  (lambda (environment)
    (car environment)))

(define frame-variables
  (lambda (frame)
    (car frame)))

(define frame-values
  (lambda (frame)
    (cdr frame)))

(define frame
  (lambda (variables values)
    (pair variables values)))

; TODO: throw an error if variable already exist.
(define define-variable!
  (lambda (variable value environment)
    (letrec
        ((frame (first-frame environment))
         (scan (lambda (variables values)
                 (case
                  ((null? variables)
                   (add-binding-to-frame! variable value frame))
                  ((eq? variable (car variables))
                   (set-car! values value))
                  (else
                   (scan (cdr variables) (cdr values)))))))
      (scan (frame-variables frame)
            (frame-values frame)))))

(define extend-environment
  (lambda (variables values base-environment)
    (if (= (length variables) (length values))
        (pair (frame variables values) base-environment)
        (if (< (length variables) (length values))
            (error "Too many arguments supplied" variables values)
            (error "Too few arguments supplied" variables values)))))

(define setup-environment
  (lambda ()
    (let
        ((initial-environment
          (extend-environment
           (primitive-procedure-names)
           (primitive-procedure-objects)
           the-empty-environment)))
      (define-variable! 'true #t initial-environment)
      (define-variable! 'false #f initial-environment)
      initial-environment)))

(define the-global-environment 
  (setup-environment))

(define enclosing-environment
  (lambda (environment)
    (cdr environment)))