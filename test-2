(define add-binding-to-frame!
  (lambda (variable value frame)
    (set-car! frame (cons variable (car frame)))
    (set-cdr! frame (cons value (cdr frame)))))

(define frame-values
  (lambda (frame)
    (cdr frame)))

(define frame-variables
  (lambda (frame)
    (car frame)))

(define first-frame
  (lambda (environment)
    (car environment)))

(define define-variable!
  (lambda (variable value environment)
    (letrec
        ((frame (first-frame environment))
         (scan (lambda (variables values)
                 (cond
                  ((null? variables)
                   (add-binding-to-frame! variable value frame))
                  ((eq? variable (car variables))
                   (set-car! values value))
                  (else
                   (scan (cdr variables) (cdr values)))))))
      (scan (frame-variables frame)
            (frame-values frame)))))

(define (make-frame variables values)
  (cons variables values))

(define the-empty-environment '())

(define (extend-environment vars vals base-env)
  (if (= (length vars) (length vals))
      (cons (make-frame vars vals) base-env)
      (if (< (length vars) (length vals))
          (error "Too many arguments supplied" 
                 vars 
                 vals)
          (error "Too few arguments supplied" 
                 vars 
                 vals))))

(define (user-print object)
  (if (compound-procedure? object)
      (display 
       (list 'compound-procedure
             (procedure-parameters object)
             (procedure-body object)
             '<procedure-env>))
      (display object)))

(define code-string
"
(define (append x y)
  (if (null? x)
      y
      (cons (car x) (append (cdr x) y))))
(append '(a b c) '(d e f))
")

(define (prompt-for-input string)
  (newline) (newline) 
  (display string) (newline))

(define (announce-output string)
  (newline) (display string) (newline))

(define apply-in-underlying-scheme apply)

(define (apply-primitive-procedure proc args)
  (apply-in-underlying-scheme
   (primitive-implementation proc) args))

(define (primitive-procedure-names)
  (map car primitive-procedures))

(define (primitive-procedure-objects)
  (map (lambda (proc) 
         (list 'primitive (cadr proc)))
       primitive-procedures))

(define primitive-procedures
  (list (list 'car car)
        (list 'cdr cdr)
        (list 'cons cons)
        (list 'null? null?)))

(define (primitive-procedure? proc)
  (tagged-list? proc 'primitive))

(define (primitive-implementation proc) 
  (cadr proc))

(define (setup-environment)
  (let ((initial-env
         (extend-environment 
          (primitive-procedure-names)
          (primitive-procedure-objects)
          the-empty-environment)))
    (define-variable! 'true #t initial-env)
    (define-variable! 'false #f initial-env)
    initial-env))

(define the-global-environment 
  (setup-environment))

(define (set-variable-value! var val env)
  (define (env-loop env)
    (define (scan vars vals)
      (cond ((null? vars)
             (env-loop 
              (enclosing-environment env)))
            ((eq? var (car vars))
             (set-car! vals val))
            (else (scan (cdr vars) 
                        (cdr vals)))))
    (if (eq? env the-empty-environment)
        (error "Unbound variable: SET!" var)
        (let ((frame (first-frame env)))
          (scan (frame-variables frame)
                (frame-values frame)))))
  (env-loop env))

(define (lookup-variable-value var env)
  (define (env-loop env)
    (define (scan vars vals)
      (cond ((null? vars)
             (env-loop 
              (enclosing-environment env)))
            ((eq? var (car vars))
             (car vals))
            (else (scan (cdr vars) 
                        (cdr vals)))))
    (if (eq? env the-empty-environment)
        (error "Unbound variable" var)
        (let ((frame (first-frame env)))
          (scan (frame-variables frame)
                (frame-values frame)))))
  (env-loop env))

(define (enclosing-environment env) (cdr env))

(define (make-procedure parameters body env)
  (list 'procedure parameters body env))

(define (compound-procedure? p)
  (tagged-list? p 'procedure))

(define (procedure-parameters p) (cadr p))

(define (procedure-body p) (caddr p))

(define (procedure-environment p) (cadddr p))

(define (true? x)
  (not (eq? x #f)))

(define (false? x)
  (eq? x #f))

(define (cond? exp) 
  (tagged-list? exp 'cond))

(define (cond-clauses exp) (cdr exp))

(define (cond-else-clause? clause)
  (eq? (cond-predicate clause) 'else))

(define (cond-predicate clause) 
  (car clause))

(define (cond-actions clause) 
  (cdr clause))

(define (cond->if exp)
  (expand-clauses (cond-clauses exp)))

(define (expand-clauses clauses)
  (if (null? clauses)
      'false     ; no else clause
      (let ((first (car clauses))
            (rest (cdr clauses)))
        (if (cond-else-clause? first)
            (if (null? rest)
                (sequence->exp 
                 (cond-actions first))
                (error "ELSE clause isn't 
                        last: COND->IF"
                       clauses))
            (make-if (cond-predicate first)
                     (sequence->exp 
                      (cond-actions first))
                     (expand-clauses 
                      rest))))))

(define (application? exp) (pair? exp))

(define (operator exp) (car exp))

(define (operands exp) (cdr exp))

(define (no-operands? ops) (null? ops))

(define (first-operand ops) (car ops))

(define (rest-operands ops) (cdr ops))

(define (sequence->exp seq)
  (cond ((null? seq) seq)
        ((last-exp? seq) (first-expression seq))
        (else (make-begin seq))))

(define (make-begin seq) (cons 'begin seq))

(define (begin? exp) 
  (tagged-list? exp 'begin))

(define (begin-actions exp) (cdr exp))

(define (last-exp? seq) (null? (cdr seq)))

(define (first-expression seq) (car seq))

(define (rest-exps seq) (cdr seq))

(define (make-if predicate 
                 consequent 
                 alternative)
  (list 'if 
        predicate 
        consequent 
        alternative))

(define (if? exp) (tagged-list? exp 'if))

(define (if-predicate exp) (cadr exp))

(define (if-consequent exp) (caddr exp))

(define (if-alternative exp)
  (if (not (null? (cdddr exp)))
      (cadddr exp)
      'false))

(define (make-lambda parameters body)
  (cons 'lambda (cons parameters body)))

(define (lambda? exp) 
  (tagged-list? exp 'lambda))

(define (lambda-parameters exp) (cadr exp))

(define (lambda-body exp) (cddr exp))

(define (definition? exp)
  (tagged-list? exp 'define))

(define (definition-variable exp)
  (if (symbol? (cadr exp))
      (cadr exp)
      (caadr exp)))

(define (definition-value exp)
  (if (symbol? (cadr exp))
      (caddr exp)
      (make-lambda 
       (cdadr exp)   ; formal parameters
       (cddr exp)))) ; body

(define (assignment-variable exp) 
  (cadr exp))

(define (assignment-value exp) (caddr exp))

(define (assignment? exp)
  (tagged-list? exp 'set!))

(define (tagged-list? exp tag)
  (if (pair? exp)
      (eq? (car exp) tag)
      #f))

(define (text-of-quotation exp)
  (cadr exp))

(define (quoted? exp)
  (tagged-list? exp 'quote))

(define (variable? exp) (symbol? exp))

(define (self-evaluating? exp)
  (cond ((number? exp) #t)
        ((string? exp) #f)
        (else #f)))

(define (evaluate-definition exp env)
  (define-variable! 
    (definition-variable exp)
    (evaluate (definition-value exp) env)
    env)
  'ok)

(define (evaluate-assignment exp env)
  (set-variable-value! 
   (assignment-variable exp)
   (evaluate (assignment-value exp) env)
   env)
  'ok)

(define evaluate-sequence
  (lambda (expressions environment)
    (cond
     ((last-expression? expressions)
      (evaluate (irst-expression expressions) environment))
     (else
      (evaluate (first-expression expressions) environment)
      (evaluate-sequence (rest-expressions expressions) environment)))))

(define evaluate-if
  (lambda (expression environment)
    (if (true? (evaluate (if-predicate expression) environment))
        (evaluate (if-consequent expression) environment)
        (evaluate (if-alternative expression) environment))))

(define list-of-values
  (lambda (expressions environment)
    (if (no-operands? expressions)
        '()
        (cons (evaluate (first-operand expression) environment)
              (list-of-values (rest-operands expression) environment)))))

(define apply
  (lambda (procedure arguments)
    (cond
     ((primitive-procedure? procedure)
      (apply-primitive-procedure procedure arguments))
     ((compound-procedure? procedure)
      (evaluate-sequence
       (procedure-body procedure)
       (extend-environment
        (procedure-parameters procedure)
        arguments
        (procedure-environment procedure))))
     (else
      (error "Unknown procedure type: APPLY" procedure)))))

(define evaluate
  (lambda (expression environment)
    (cond
     ((self-evaluating? expression)
      expression)
     ((variable? expression)
      (lookup-variable-value expression environment))
     ((quoted? expression)
      (text-of-quotation expression))
     ((assignment? expression)
      (evaluate-assignment expression environment))
     ((definition? expression)
      (evaluate-definition expression environment))
     ((if? expression)
      (evaluate-if expression environment))
     ((lambda? expression)
      (make-procedure
       (lambda-parameters expression)
       (lambda-body expression)
       environment))
     ((begin? expression)
      (evaluate-sequence (begin-actions expression) environemtn))
     ((cond? expression)
      (evaluate (cond->if expression) environment))
     ((application? expression)
      (apply (evaluate (operator expression) environment)
             (list-of-values (operands expression) environment)))
     (else
      (error "Unknown expression type: EVAL" expression)))))

(define run-REPL
  (lambda ()
    (let*
        ((port (open-input-string code-string))
         (expression (read port))
         (output (evaluate expression the-global-environment)))
      (user-print output))))

(run-REPL)
